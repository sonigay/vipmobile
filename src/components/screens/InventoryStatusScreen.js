import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Card,
  CardContent,
  CircularProgress,
  Alert,
  Tabs,
  Tab,
  IconButton,
  Tooltip
} from '@mui/material';
import {
  Refresh as RefreshIcon,
  FilterList as FilterIcon,
  Visibility as VisibilityIcon
} from '@mui/icons-material';
import { inventoryAPI, fetchAgentData } from '../../api';

// Ïû¨Í≥†Ïû•Ìëú Î©îÏù∏ ÌôîÎ©¥
const InventoryStatusScreen = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [inventoryData, setInventoryData] = useState([]);
  const [agents, setAgents] = useState([]);
  const [filters, setFilters] = useState({
    agent: '',
    office: '',
    department: ''
  });

  // ÌïÑÌÑ∞ ÏòµÏÖòÎì§
  const [filterOptions, setFilterOptions] = useState({
    agents: [],
    offices: [],
    departments: []
  });

  // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      let data;
      if (activeTab === 0) {
        // Î™®Îç∏Î≥Ñ Ïû¨Í≥† ÌòÑÌô©
        data = await inventoryAPI.getInventoryStatus(filters);
      } else {
        // ÏÉâÏÉÅÎ≥Ñ Ïû¨Í≥† ÌòÑÌô©
        data = await inventoryAPI.getInventoryStatusByColor(filters);
      }
      
      if (data.success) {
        // Îã§Ï§ë Ï†ïÎ†¨: Î™®Îç∏Î≥Ñ ‚Üí ÏÉâÏÉÅÎ≥Ñ ‚Üí Íµ¨Î∂ÑÎ≥Ñ
        const sortedData = data.data.sort((a, b) => {
          // 1ÏàúÏúÑ: Î™®Îç∏Î™Ö
          if (a.modelName !== b.modelName) {
            return a.modelName.localeCompare(b.modelName);
          }
          // 2ÏàúÏúÑ: ÏÉâÏÉÅ (ÏÉâÏÉÅÎ≥Ñ ÌÉ≠ÏóêÏÑúÎßå)
          if (activeTab === 1 && a.color !== b.color) {
            return a.color.localeCompare(b.color);
          }
          // 3ÏàúÏúÑ: Íµ¨Î∂Ñ
          return (a.category || '').localeCompare(b.category || '');
        });
        
        setInventoryData(sortedData);
      } else {
        setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Ïû¨Í≥† Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
    }
  };

  // Îã¥ÎãπÏûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadAgentData = async () => {
    try {
      const agentData = await fetchAgentData();
      setAgents(agentData);
      
      // ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ±
      const offices = [...new Set(agentData.map(agent => agent.office).filter(Boolean))].sort();
      const departments = [...new Set(agentData.map(agent => agent.department).filter(Boolean))].sort();
      
      setFilterOptions({
        agents: agentData,
        offices,
        departments
      });
    } catch (error) {
      console.error('Îã¥ÎãπÏûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // Ï¥àÍ∏∞ Î°úÎìú
  useEffect(() => {
    loadAgentData();
  }, []);

  useEffect(() => {
    loadData();
  }, [activeTab, filters]);

  // ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleFilterChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
  const handleFilterReset = () => {
    setFilters({
      agent: '',
      office: '',
      department: ''
    });
  };

  // ÌÉ≠ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
  const handleRefresh = () => {
    loadData();
  };

  // ÏàòÎüâÎ≥Ñ ÏÉâÏÉÅ Í≤∞Ï†ï Ìï®Ïàò
  const getQuantityColor = (count, type = 'daily') => {
    if (count === 0) return 'text.secondary';
    
    if (type === 'inventory') {
      // ÏûîÏó¨Ïû¨Í≥†: 1~/5~/10~/20~/40~
      if (count >= 40) return '#d32f2f'; // Îπ®Í∞ï
      if (count >= 20) return '#f57c00'; // Ï£ºÌô©
      if (count >= 10) return '#fbc02d'; // ÎÖ∏Îûë
      if (count >= 5) return '#388e3c';  // Ï¥àÎ°ù
      return '#1976d2'; // ÌååÎûë
    } else if (type === 'monthly') {
      // ÎãπÏõîÍ∞úÌÜµ: 1~/5~/10~/20~/40~
      if (count >= 40) return '#d32f2f'; // Îπ®Í∞ï
      if (count >= 20) return '#f57c00'; // Ï£ºÌô©
      if (count >= 10) return '#fbc02d'; // ÎÖ∏Îûë
      if (count >= 5) return '#388e3c';  // Ï¥àÎ°ù
      return '#1976d2'; // ÌååÎûë
    } else {
      // ÏùºÎ≥Ñ Í∞úÌÜµ: 1~/2~/3~/5~/10~
      if (count >= 10) return '#d32f2f'; // Îπ®Í∞ï
      if (count >= 5) return '#f57c00';  // Ï£ºÌô©
      if (count >= 3) return '#fbc02d';  // ÎÖ∏Îûë
      if (count >= 2) return '#388e3c';  // Ï¥àÎ°ù
      return '#1976d2'; // ÌååÎûë
    }
  };

  // ÏùºÎ≥Ñ Í∞úÌÜµ ÌòÑÌô© Î†åÎçîÎßÅ
  const renderDailyActivation = (dailyData) => {
    return dailyData.map((day, index) => (
      <TableCell key={index} align="center" sx={{ 
        minWidth: 30, 
        p: 0.5,
        fontSize: '0.75rem',
        color: getQuantityColor(day.count, 'daily'),
        fontWeight: day.count > 0 ? 'bold' : 'normal',
        borderRight: index < 30 ? '1px solid #f0f0f0' : 'none',
        backgroundColor: '#ffffff'
      }}>
        {day.count}
      </TableCell>
    ));
  };

    return (
    <Box sx={{ 
      p: 3, 
      height: '100vh', 
      overflow: 'hidden', 
      display: 'flex', 
      flexDirection: 'column',
      backgroundColor: '#ffffff'
    }}>
      {/* Ìó§Îçî */}
      <Box sx={{ 
        mb: 3, 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        backgroundColor: '#ffffff',
        borderRadius: 2,
        p: 2,
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}>
        <Typography variant="h4" component="h1" sx={{ 
          fontWeight: 'bold',
          color: '#1976d2'
        }}>
          üìä Ïû¨Í≥†Ïû•Ìëú
        </Typography>
        
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Tooltip title="ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî">
            <IconButton 
              onClick={handleFilterReset} 
              sx={{ 
                backgroundColor: '#f5f5f5',
                '&:hover': { backgroundColor: '#e0e0e0' }
              }}
            >
              <FilterIcon />
            </IconButton>
          </Tooltip>
          <Tooltip title="ÏÉàÎ°úÍ≥†Ïπ®">
            <IconButton 
              onClick={handleRefresh} 
              sx={{ 
                backgroundColor: '#e3f2fd',
                color: '#1976d2',
                '&:hover': { backgroundColor: '#bbdefb' }
              }}
            >
              <RefreshIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

             {/* ÌïÑÌÑ∞ ÏÑπÏÖò */}
       <Paper sx={{ 
         p: 3, 
         mb: 3, 
         backgroundColor: '#ffffff',
         borderRadius: 3,
         boxShadow: '0 4px 12px rgba(0,0,0,0.08)',
         border: '1px solid #f0f0f0'
       }}>
         <Grid container spacing={3} alignItems="center">
           <Grid item xs={12} sm={2}>
             <FormControl fullWidth size="small">
               <InputLabel sx={{ color: '#666666' }}>Îã¥ÎãπÏûê</InputLabel>
               <Select
                 value={filters.agent}
                 onChange={(e) => handleFilterChange('agent', e.target.value)}
                 label="Îã¥ÎãπÏûê"
                 sx={{
                   backgroundColor: '#fafafa',
                   '& .MuiOutlinedInput-notchedOutline': {
                     borderColor: '#e0e0e0'
                   },
                   '&:hover .MuiOutlinedInput-notchedOutline': {
                     borderColor: '#1976d2'
                   }
                 }}
               >
                 <MenuItem value="">Ï†ÑÏ≤¥ Îã¥ÎãπÏûê</MenuItem>
                 {filterOptions.agents.map((agent) => (
                   <MenuItem key={agent.contactId} value={agent.target}>
                     {agent.target}
                   </MenuItem>
                 ))}
               </Select>
             </FormControl>
           </Grid>
           
           <Grid item xs={12} sm={2}>
             <FormControl fullWidth size="small">
               <InputLabel sx={{ color: '#666666' }}>ÏÇ¨Î¨¥Ïã§</InputLabel>
               <Select
                 value={filters.office}
                 onChange={(e) => handleFilterChange('office', e.target.value)}
                 label="ÏÇ¨Î¨¥Ïã§"
                 sx={{
                   backgroundColor: '#fafafa',
                   '& .MuiOutlinedInput-notchedOutline': {
                     borderColor: '#e0e0e0'
                   },
                   '&:hover .MuiOutlinedInput-notchedOutline': {
                     borderColor: '#1976d2'
                   }
                 }}
               >
                 <MenuItem value="">Ï†ÑÏ≤¥ ÏÇ¨Î¨¥Ïã§</MenuItem>
                 {filterOptions.offices.map((office) => (
                   <MenuItem key={office} value={office}>
                     {office}
                   </MenuItem>
                 ))}
               </Select>
             </FormControl>
           </Grid>
           
           <Grid item xs={12} sm={2}>
             <FormControl fullWidth size="small">
               <InputLabel sx={{ color: '#666666' }}>ÏÜåÏÜç</InputLabel>
               <Select
                 value={filters.department}
                 onChange={(e) => handleFilterChange('department', e.target.value)}
                 label="ÏÜåÏÜç"
                 sx={{
                   backgroundColor: '#fafafa',
                   '& .MuiOutlinedInput-notchedOutline': {
                     borderColor: '#e0e0e0'
                   },
                   '&:hover .MuiOutlinedInput-notchedOutline': {
                     borderColor: '#1976d2'
                   }
                 }}
               >
                 <MenuItem value="">Ï†ÑÏ≤¥ ÏÜåÏÜç</MenuItem>
                 {filterOptions.departments.map((department) => (
                   <MenuItem key={department} value={department}>
                     {department}
                   </MenuItem>
                 ))}
               </Select>
             </FormControl>
           </Grid>
           
           <Grid item xs={12} sm={3}>
             <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
               <Chip 
                 label={`Ï¥ù ${inventoryData.length}Í∞ú Î™®Îç∏`} 
                 sx={{ 
                   backgroundColor: '#e3f2fd',
                   color: '#1976d2',
                   fontWeight: 'bold'
                 }}
               />
               <Chip 
                 label={`ÏûîÏó¨Ïû¨Í≥†: ${inventoryData.reduce((sum, item) => sum + item.inventoryCount, 0)}Í∞ú`} 
                 sx={{ 
                   backgroundColor: '#fff3e0',
                   color: '#f57c00',
                   fontWeight: 'bold'
                 }}
               />
             </Box>
           </Grid>
           
           <Grid item xs={12} sm={3}>
             <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
               <Chip 
                 label={`ÎãπÏõîÍ∞úÌÜµ: ${inventoryData.reduce((sum, item) => sum + item.monthlyActivation, 0)}Í∞ú`} 
                 sx={{ 
                   backgroundColor: '#e8f5e8',
                   color: '#388e3c',
                   fontWeight: 'bold'
                 }}
               />
             </Box>
           </Grid>
         </Grid>
       </Paper>

      {/* ÌÉ≠ */}
      <Box sx={{ 
        borderBottom: 1, 
        borderColor: '#e0e0e0', 
        mb: 3,
        backgroundColor: '#ffffff',
        borderRadius: 2,
        p: 1
      }}>
        <Tabs 
          value={activeTab} 
          onChange={handleTabChange}
          sx={{
            '& .MuiTab-root': {
              color: '#666666',
              fontWeight: 'bold',
              '&.Mui-selected': {
                color: '#1976d2'
              }
            },
            '& .MuiTabs-indicator': {
              backgroundColor: '#1976d2'
            }
          }}
        >
          <Tab label="Î™®Îç∏Î≥Ñ Ïû¨Í≥† ÌòÑÌô©" />
          <Tab label="ÏÉâÏÉÅÎ≥Ñ Ïû¨Í≥† ÌòÑÌô©" />
        </Tabs>
      </Box>

      {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
      {error && (
        <Alert severity="error" sx={{ 
          mb: 3,
          backgroundColor: '#ffebee',
          color: '#c62828',
          borderRadius: 2
        }}>
          {error}
        </Alert>
      )}

      {/* Î°úÎî© */}
      {loading && (
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          p: 4,
          backgroundColor: '#ffffff',
          borderRadius: 2
        }}>
          <CircularProgress sx={{ color: '#1976d2' }} />
        </Box>
      )}

             {/* Ïû¨Í≥† ÌÖåÏù¥Î∏î */}
       {!loading && !error && (
         <Box sx={{ flex: 1, overflow: 'auto' }}>
           <TableContainer component={Paper} sx={{ 
             borderRadius: 3, 
             boxShadow: '0 4px 12px rgba(0,0,0,0.08)',
             border: '1px solid #f0f0f0',
             backgroundColor: '#ffffff',
             '& .MuiTable-root': {
               borderCollapse: 'separate',
               borderSpacing: 0
             }
           }}>
             <Table stickyHeader>
               <TableHead>
                 <TableRow sx={{ backgroundColor: '#1976d2' }}>
                   <TableCell sx={{ 
                     backgroundColor: '#1976d2', 
                     color: 'white', 
                     fontWeight: 'bold',
                     minWidth: 120,
                     borderRight: '1px solid #1565c0'
                   }}>
                     Íµ¨Î∂Ñ
                   </TableCell>
                   <TableCell sx={{ 
                     backgroundColor: '#1976d2', 
                     color: 'white', 
                     fontWeight: 'bold',
                     minWidth: 200,
                     borderRight: '1px solid #1565c0'
                   }}>
                     Î™®Îç∏Î™Ö
                   </TableCell>
                   {activeTab === 1 && (
                     <TableCell sx={{ 
                       backgroundColor: '#1976d2', 
                       color: 'white', 
                       fontWeight: 'bold',
                       minWidth: 100,
                       borderRight: '1px solid #1565c0'
                     }}>
                       ÏÉâÏÉÅ
                     </TableCell>
                   )}
                   <TableCell sx={{ 
                     backgroundColor: '#1976d2', 
                     color: 'white', 
                     fontWeight: 'bold',
                     minWidth: 80,
                     borderRight: '1px solid #1565c0'
                   }}>
                     ÏûîÏó¨Ïû¨Í≥†
                   </TableCell>
                   <TableCell sx={{ 
                     backgroundColor: '#1976d2', 
                     color: 'white', 
                     fontWeight: 'bold',
                     minWidth: 80,
                     borderRight: '1px solid #1565c0'
                   }}>
                     ÎãπÏõîÍ∞úÌÜµ
                   </TableCell>
                   
                                      {/* ÏùºÎ≥Ñ Ïª¨Îüº Ìó§Îçî */}
                   {Array.from({ length: 31 }, (_, i) => (
                     <TableCell key={i} align="center" sx={{ 
                       backgroundColor: '#1976d2', 
                       color: 'white', 
                       fontWeight: 'bold',
                       minWidth: 30,
                       p: 0.5,
                       fontSize: '0.75rem',
                       borderRight: i < 30 ? '1px solid #1565c0' : 'none'
                     }}>
                       {String(i + 1).padStart(2, '0')}
                     </TableCell>
                   ))}
                 </TableRow>
                 
                                   {/* Ï¥ù ÏàòÎüâ ÏöîÏïΩ Ìñâ */}
                  <TableRow sx={{ backgroundColor: '#f8f9fa' }}>
                    <TableCell sx={{ 
                      backgroundColor: '#f8f9fa', 
                      fontWeight: 'bold',
                      minWidth: 120,
                      borderBottom: '2px solid #1976d2'
                    }}>
                      üìä Ï¥ùÍ≥Ñ
                    </TableCell>
                    <TableCell sx={{ 
                      backgroundColor: '#f8f9fa', 
                      fontWeight: 'bold',
                      minWidth: 200,
                      borderBottom: '2px solid #1976d2'
                    }}>
                      Ï†ÑÏ≤¥ Î™®Îç∏
                    </TableCell>
                    {activeTab === 1 && (
                      <TableCell sx={{ 
                        backgroundColor: '#f8f9fa', 
                        fontWeight: 'bold',
                        minWidth: 100,
                        borderBottom: '2px solid #1976d2'
                      }}>
                        Ï†ÑÏ≤¥ ÏÉâÏÉÅ
                      </TableCell>
                    )}
                    <TableCell sx={{ 
                      backgroundColor: '#f8f9fa', 
                      fontWeight: 'bold',
                      minWidth: 80,
                      borderBottom: '2px solid #1976d2',
                      color: getQuantityColor(inventoryData.reduce((sum, item) => sum + item.inventoryCount, 0), 'inventory')
                    }}>
                      {inventoryData.reduce((sum, item) => sum + item.inventoryCount, 0)}
                    </TableCell>
                    <TableCell sx={{ 
                      backgroundColor: '#f8f9fa', 
                      fontWeight: 'bold',
                      minWidth: 80,
                      borderBottom: '2px solid #1976d2',
                      color: getQuantityColor(inventoryData.reduce((sum, item) => sum + item.monthlyActivation, 0), 'monthly')
                    }}>
                      {inventoryData.reduce((sum, item) => sum + item.monthlyActivation, 0)}
                    </TableCell>
                    
                    {/* ÏùºÎ≥Ñ Ï¥ù Í∞úÌÜµ ÏàòÎüâ */}
                    {Array.from({ length: 31 }, (_, i) => {
                      const dayTotal = inventoryData.reduce((sum, item) => sum + (item.dailyActivation[i]?.count || 0), 0);
                      return (
                        <TableCell key={i} align="center" sx={{ 
                          backgroundColor: '#f8f9fa', 
                          fontWeight: 'bold',
                          minWidth: 30,
                          p: 0.5,
                          fontSize: '0.75rem',
                          borderBottom: '2px solid #1976d2',
                          color: getQuantityColor(dayTotal, 'daily')
                        }}>
                          {dayTotal}
                        </TableCell>
                      );
                    })}
                  </TableRow>
                  
                  {/* ÏöîÏùº Ìñâ */}
                  <TableRow sx={{ backgroundColor: '#ffffff' }}>
                    <TableCell sx={{ 
                      backgroundColor: '#ffffff', 
                      fontWeight: 'bold',
                      minWidth: 120,
                      borderBottom: '1px solid #e0e0e0'
                    }}>
                      
                    </TableCell>
                    <TableCell sx={{ 
                      backgroundColor: '#ffffff', 
                      fontWeight: 'bold',
                      minWidth: 200,
                      borderBottom: '1px solid #e0e0e0'
                    }}>
                      
                    </TableCell>
                    {activeTab === 1 && (
                      <TableCell sx={{ 
                        backgroundColor: '#ffffff', 
                        fontWeight: 'bold',
                        minWidth: 100,
                        borderBottom: '1px solid #e0e0e0'
                      }}>
                        
                      </TableCell>
                    )}
                    <TableCell sx={{ 
                      backgroundColor: '#ffffff', 
                      fontWeight: 'bold',
                      minWidth: 80,
                      borderBottom: '1px solid #e0e0e0'
                    }}>
                      
                    </TableCell>
                    <TableCell sx={{ 
                      backgroundColor: '#ffffff', 
                      fontWeight: 'bold',
                      minWidth: 80,
                      borderBottom: '1px solid #e0e0e0'
                    }}>
                      
                    </TableCell>
                    
                    {/* ÏùºÎ≥Ñ ÏöîÏùº ÌëúÏãú */}
                    {Array.from({ length: 31 }, (_, i) => {
                      const dayOfWeek = (i + 1) % 7; // 0=ÏùºÏöîÏùº, 1=ÏõîÏöîÏùº, ..., 6=ÌÜ†ÏöîÏùº
                      const dayNames = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
                      const dayName = dayNames[dayOfWeek];
                      
                      let dayColor = '#666666'; // Í∏∞Î≥∏ ÌöåÏÉâ
                      if (dayName === 'ÌÜ†') dayColor = '#1976d2'; // ÌÜ†ÏöîÏùº ÌååÎûë
                      if (dayName === 'Ïùº') dayColor = '#d32f2f'; // ÏùºÏöîÏùº Îπ®Í∞ï
                      
                      return (
                        <TableCell key={i} align="center" sx={{ 
                          backgroundColor: '#ffffff', 
                          fontWeight: 'bold',
                          minWidth: 30,
                          p: 0.5,
                          fontSize: '0.75rem',
                          borderBottom: '1px solid #e0e0e0',
                          color: dayColor
                        }}>
                          {dayName}
                        </TableCell>
                      );
                    })}
                  </TableRow>
               </TableHead>
                              <TableBody>
                                  {inventoryData.map((item, index) => {
                    // Íµ¨Î∂ÑÎ≥Ñ Î∞∞Í≤ΩÏÉâ Í≤∞Ï†ï
                    const getRowBackgroundColor = (category) => {
                      if (category === 'ÏÇºÏÑ±') return '#f8fbff'; // Îß§Ïö∞ Ïó∞Ìïú ÌååÎûë
                      if (category === '2ND') return '#faf8ff'; // Îß§Ïö∞ Ïó∞Ìïú Î≥¥Îùº
                      return '#ffffff'; // Ìù∞ÏÉâ (Í∏∞ÌÉÄ)
                    };
                    
                    return (
                      <TableRow 
                        key={index}
                        sx={{ 
                          backgroundColor: getRowBackgroundColor(item.category),
                          borderBottom: '1px solid #f0f0f0',
                          '&:hover': { 
                            backgroundColor: '#f5f9ff',
                            boxShadow: '0 2px 8px rgba(25, 118, 210, 0.1)'
                          }
                        }}
                      >
                     <TableCell sx={{ 
                       minWidth: 120,
                       borderRight: '1px solid #f0f0f0'
                     }}>
                       <Chip 
                         label={item.category || 'Í∏∞ÌÉÄ'} 
                         size="small"
                         sx={{
                           backgroundColor: item.category === 'ÏÇºÏÑ±' ? '#e3f2fd' : 
                                           item.category === '2ND' ? '#f3e5f5' : '#f5f5f5',
                           color: item.category === 'ÏÇºÏÑ±' ? '#1976d2' : 
                                  item.category === '2ND' ? '#7b1fa2' : '#666666',
                           fontWeight: 'bold'
                         }}
                       />
                     </TableCell>
                     <TableCell sx={{ 
                       minWidth: 200, 
                       fontWeight: 'medium',
                       borderRight: '1px solid #f0f0f0',
                       color: '#333333'
                     }}>
                       {item.modelName}
                     </TableCell>
                     {activeTab === 1 && (
                       <TableCell sx={{ 
                         minWidth: 100,
                         borderRight: '1px solid #f0f0f0',
                         color: '#666666'
                       }}>
                         {item.color}
                       </TableCell>
                     )}
                                          <TableCell sx={{ 
                        minWidth: 80, 
                        fontWeight: 'bold',
                        color: getQuantityColor(item.inventoryCount, 'inventory'),
                        borderRight: '1px solid #f0f0f0',
                        textAlign: 'center'
                      }}>
                        {item.inventoryCount}
                      </TableCell>
                      <TableCell sx={{ 
                        minWidth: 80,
                        color: getQuantityColor(item.monthlyActivation, 'monthly'),
                        fontWeight: item.monthlyActivation > 0 ? 'bold' : 'normal',
                        borderRight: '1px solid #f0f0f0',
                        textAlign: 'center'
                      }}>
                        {item.monthlyActivation}
                      </TableCell>
                     
                                          {/* ÏùºÎ≥Ñ Í∞úÌÜµ ÌòÑÌô© */}
                      {renderDailyActivation(item.dailyActivation)}
                    </TableRow>
                  );
                })}
               </TableBody>
            </Table>
          </TableContainer>
        </Box>
      )}
    </Box>
  );
};

export default InventoryStatusScreen; 